@Library("shared-libraries")
import io.libs.SqlUtils
import io.libs.ProjectHelpers
import io.libs.Utils


import org.xml.sax.InputSource

import javax.xml.xpath.XPath
import javax.xml.xpath.XPathFactory
import java.io.FileReader
import groovy.xml.* 
import groovy.util.*
def sqlUtils = new SqlUtils()
def utils = new Utils()
def projectHelpers = new ProjectHelpers()

def updateDbTasks = [:]


pipeline {

    parameters {
        string(defaultValue: "${env.jenkinsAgent}", description: 'Нода дженкинса, на которой запускать пайплайн. По умолчанию master', name: 'jenkinsAgent')
        

        
    }

    environment {
        Path_="//nn-fs-01\\Obmen_1c\\CF_UPDATE_TEST_КА\\UpdateSetting.xml"  
    
        
      }

    agent {
        label "${(env.jenkinsAgent == null || env.jenkinsAgent == 'null') ? "master" : env.jenkinsAgent}"
    }
    options {
         timeout(time: 8, unit: 'HOURS') 
         buildDiscarder(logRotator(numToKeepStr:'10'))
     }
    stages {
        
     
        
        stage("Захват объектов в релизном хранилище") {
            steps {
                timestamps {
                    script {                  
                            
                               // def xml="<Collection><CustomerQuote><ID>99988877766</ID><TypeCode>2059</TypeCode><ApprovalStatusCode>4</ApprovalStatusCode></CustomerQuote><CustomerQuote><ID>99988877755</ID><TypeCode>2059</TypeCode><ApprovalStatusCode>4</ApprovalStatusCode></CustomerQuote></Collection>"
                                def xml= new File("C:\\Users\\daneliya.n\\ProjConf\\UpdateSetting.XML")
                                def completeXml= new XmlSlurper()
                                def doc= completeXml.parseText(xml.text)//completeXml.parseText(xml)
                                //echo "${doc.CustomerQuote[0].ID.text()}" 
                                echo "${doc.text()}"                           

                                

                    }
                }
            }
        }


        
    }   
}

