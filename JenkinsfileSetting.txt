@Library("shared-libraries")
import io.libs.SqlUtils
import io.libs.ProjectHelpers
import io.libs.Utils


import org.xml.sax.InputSource

import javax.xml.xpath.XPath
import javax.xml.xpath.XPathFactory
import java.io.FileReader
import groovy.xml.* 
import groovy.util.*
def sqlUtils = new SqlUtils()
def utils = new Utils()
def projectHelpers = new ProjectHelpers()

def updateDbTasks = [:]


pipeline {

    parameters {
        string(defaultValue: "${env.jenkinsAgent}", description: 'Нода дженкинса, на которой запускать пайплайн. По умолчанию master', name: 'jenkinsAgent')
        string(defaultValue: "${env.PathToFileSetting}", description: 'Путь к файлу xml с ответом по старту обновлений', name: 'PathToFileSetting')
        booleanParam(defaultValue: "${env.skipRemainingStages}", description: 'flag', name: 'skipRemainingStages')
    }
    
    environment {
       PathToFileSetting="${env.PathToFileSetting}"
       TestMessage=""
       skipRemainingStages="${env.skipRemainingStages}"
    }
    post {
        always {
            bat "echo finished"
           
        }
        failure {
           bat "echo failure"
           withCredentials([string(credentialsId: 'JenkinsBotID', variable: 'TOKEN'), string(credentialsId: 'JenkinsChannel', variable: 'CHAT_ID')]) {
            script{
            utils.cmd("""curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=*Update_is_FAILURE*""")
            }
            }
        }
        success {
            bat "echo success"
            withCredentials([string(credentialsId: 'JenkinsBotID', variable: 'TOKEN'), string(credentialsId: 'JenkinsChannel', variable: 'CHAT_ID')]) {
            script{
            utils.cmd("""curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=*${TestMessage}*""")
            }
            }
        }
    }
    agent {
        label "${(env.jenkinsAgent == null || env.jenkinsAgent == 'null') ? "master" : env.jenkinsAgent}"
    }
    options {
         timeout(time: 8, unit: 'HOURS') 
         buildDiscarder(logRotator(numToKeepStr:'10'))
     }
    stages {    
     
        stage("Проверка на запуск обновлений") {
            steps {
                timestamps {
                    script {                  
                               //первый способ
                               // def xml="<Collection><CustomerQuote><ID>99988877766</ID><TypeCode>2059</TypeCode><ApprovalStatusCode>4</ApprovalStatusCode></CustomerQuote><CustomerQuote><ID>99988877755</ID><TypeCode>2059</TypeCode><ApprovalStatusCode>4</ApprovalStatusCode></CustomerQuote></Collection>"
                               // def xml= new File("C:\\Users\\daneliya.n\\ProjConf\\UpdateSetting.XML")
                                echo "${PathToFileSetting}"                           
                                String  fileContents= readFile ("${PathToFileSetting}")//new File("${PathToFileSetting}")
                                echo "${fileContents}"
                               // if(!xml.exists())
                                        //   {                                           
                                        //    echo "Файл не найден"   
                                        //   }
                               // else
                                   // {
                                  //   def completeXml= new XmlSlurper()
                                 //    def doc= completeXml.parseText(xml.text)//completeXml.parseText(xml)
                                     //echo "${doc.CustomerQuote[0].ID.text()}" 
                                 //    echo "${doc.text()}"  
                                 //    rez="${doc.text()}"!= "Update"
                                 //    echo "${rez}"
                                 //    if ("${doc.text()}"!= "Update") {
                                 //            utils.raiseError("Обновления отменены")  

                                  //    }      
                                  //  }                       

                                echo "Проверка файла"
                                //второй способ                               
                               // String fileContents = new File("${PathToFileSetting}").text
                                firstWord = "<Result>"
                                secondWord = "</Result>"
                                needupdate = fileContents.substring(fileContents.indexOf(firstWord) + firstWord.length(), fileContents.indexOf(secondWord))
                                echo "${needupdate}"
                                if ("${needupdate}"!= "Update") {
                                        echo "На сегодняшний день обновления отменены"
                                        TestMessage="Update_canceled"
                                        skipRemainingStages=true
                                        currentBuild.result = 'SUCCESS' 
                                        echo "Сообщение в телеграмм: " + "${TestMessage}"
                                        //return          
                                      } 
                                echo "Конец проверки файла"
                                echo "Отменить обновления?: Ответ - " + "${skipRemainingStages}"
                               

                    }
                }
            }
        }
          stage("ТЕСТ1") {
            when {
                    expression {
                            return null
                    }
                }
             steps {
                timestamps {
                    script {                  
                            
               
                            echo "Всем привет 1"                           
                            TestMessage="Update_is_SUCCESS"                                 
                              

                    }
                }
            }
        }
        stage("ТЕСТ2") {
            when {
                    expression {
                            !skipRemainingStages
                    }
                }
             steps {
                timestamps {
                    script {                  
                            
               
                            echo "Всем привет 2"                           
                            TestMessage="Update_is_SUCCESS"                                 
                              

                    }
                }
            }
        }

        
    }   
}

