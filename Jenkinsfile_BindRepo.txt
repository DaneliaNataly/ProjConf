@Library("shared-libraries")
import io.libs.SqlUtils
import io.libs.ProjectHelpers
import io.libs.Utils

def sqlUtils = new SqlUtils()
def utils = new Utils()
def projectHelpers = new ProjectHelpers()

def updateDbTasks = [:]
pipeline {
    parameters {    
        
        string(defaultValue: "${env.UserName}", description: 'Имя пользователя', name: 'UserName')
        string(defaultValue: "${env.Pass}", description: 'Пароль', name: 'Pass')
        string(defaultValue: "${env.StoragePath}", description: 'Путь к хранилищу', name: 'StoragePath')    
       
        string(defaultValue: "${env.jenkinsAgent}", description: 'Нода дженкинса, на которой запускать пайплайн. По умолчанию master', name: 'jenkinsAgent')
        string(defaultValue: "${env.PathRAC}", description: 'RAC', name: 'PathRAC')
    }

    
    post {
        always {
            bat "echo finished"
           
        }
        failure {
           bat "echo failure"
           sendTelegram("\"Не выполнено подключение базы КА_ЛАД к хранилищу\"")
        //    withCredentials([string(credentialsId: 'JenkinsBotID', variable: 'TOKEN'), string(credentialsId: 'JenkinsChannel', variable: 'CHAT_ID')]) {
        //     script{
        //     utils.cmd("""curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=*Error_connecting_to_storage*""")
        //     }
        //     }
        }
        success {
            bat "echo success"
            sendTelegram("\"Успешное подключение базы КА_ЛАД к хранилищу\"")
            // withCredentials([string(credentialsId: 'JenkinsBotID', variable: 'TOKEN'), string(credentialsId: 'JenkinsChannel', variable: 'CHAT_ID')]) {
            // script{
            // utils.cmd("""curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=*Successful_connection_to_storage*""")
            // }
            // }
        }
    }
    agent {
        label "${(env.jenkinsAgent == null || env.jenkinsAgent == 'null') ? "master" : env.jenkinsAgent}"
    }
    options {
         timeout(time: 8, unit: 'HOURS') 
         buildDiscarder(logRotator(numToKeepStr:'10'))
         }
   
    stages {
            stage ('Подключение базы КА_ЛАД к хранилищу ') {
                    steps {
                          timestamps {
                            script {
                                 env.PathRAC=env.PathRAC +"\"%ProgramFiles%\\1cv8\\8.3.22.1704\\bin\\rac.exe\""                                 
                                 //echo "${env.PathRAC}"
                                 returnCode = utils.cmd("runner session kill --settings tools/json/vrunner_KA_LAD.json --rac ${env.PathRAC} --filter appid=Designer --with-nolock")
                                 if (returnCode != 0) {
                                      utils.raiseError("Ошибка при отмене сеансов в базе КА_ЛАД")         
                                  }     
                                 returnCode = utils.cmd("runner bindrepo ${env.StoragePath} ${env.UserName} ${env.Pass} --settings tools/json/vrunner_KA_LAD.json") 
                                 if (returnCode != 0) {
                                      utils.raiseError("Ошибка при подключению к хранилищу базы КА_ЛАД")         
                                  }                                       
                                             
                            }                           
                           
                        }
                    }
                
                 }
        }
}
def cmd_m(command) {   
    stage("Команда") {
        timestamps {
            script{
                bat "chcp 65001\n ${command}"
            }
        }
    }
}        
def sendTelegram(message) {
        
        def encodedMessage = new String(message.getBytes("UTF-8"), "windows-1251")

        withCredentials([string(credentialsId: 'JenkinsBotID', variable: 'TOKEN'),
        string(credentialsId: 'JenkinsChannel', variable: 'CHAT_ID')]) {

        bat ("""curl -s -X POST https://api.telegram.org/bot$TOKEN/sendMessage -d text=$encodedMessage -d chat_id=$CHAT_ID""")
        }
        return encodedMessage
    }