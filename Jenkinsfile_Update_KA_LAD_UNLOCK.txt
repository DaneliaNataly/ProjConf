@Library("shared-libraries")
import io.libs.SqlUtils
import io.libs.ProjectHelpers
import io.libs.Utils

def sqlUtils = new SqlUtils()
def utils = new Utils()
def projectHelpers = new ProjectHelpers()

def updateDbTasks = [:]
pipeline {
    parameters {
        string(defaultValue: "${env.Server}", description: 'Сервер 1С', name: 'Server')
        string(defaultValue: "${env.ServerPort}", description: 'Порт сервера 1С', name: 'ServerPort')
        string(defaultValue: "${env.BaseName}", description: 'Имя базы данных', name: 'BaseName')
        string(defaultValue: "${env.UserName}", description: 'Имя пользователя', name: 'UserName')
        string(defaultValue: "${env.Pass}", description: 'Пароль', name: 'Pass')
        string(defaultValue: "${env.StoragePath}", description: 'Путь к хранилищу', name: 'StoragePath')        
        string(defaultValue: "${env.StorageUser}", description: 'Пользователь хранилища', name: 'StorageUser') 
        string(defaultValue: "${env.StorageUserPass}", description: 'Пароль пользователя хранилища', name: 'StorageUserPass') 
        string(defaultValue: "${env.Path1C}", description: 'Путь к 1С', name: 'Path1C')
        string(defaultValue: "${env.jenkinsAgent}", description: 'Нода дженкинса, на которой запускать пайплайн. По умолчанию master', name: 'jenkinsAgent')
        string(defaultValue: "${env.PathRAC}", description: 'RAC', name: 'PathRAC')
    }

    environment {
       baseconnection ="/S${env.Server}:${env.ServerPort}\\${env.BaseName}"
       user ="/N${env.UserName}"
      // pass = "/P${env.Pass}"   
       //storagepath ="/ConfigurationRepositoryF${env.StoragePath}"
       storageuser = "/ConfigurationRepositoryN${env.StorageUser}"
       //storageuserpass ="/ConfigurationRepositoryP${env.StorageUserPass}"
    }
    post {
        always {
            bat "echo always"
           
        }
        failure {
           // bat "echo failure"
           withCredentials([string(credentialsId: 'JenkinsBotID', variable: 'TOKEN'), string(credentialsId: 'JenkinsChannel', variable: 'CHAT_ID')]) {
            script{
            utils.cmd("""curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*Build* : `not OK` *Published* = `no`'""")
            }
            }
        }
        success {
            bat "echo success"
        }
    }
    agent {
        label "${(env.jenkinsAgent == null || env.jenkinsAgent == 'null') ? "master" : env.jenkinsAgent}"
    }
    options {
         timeout(time: 8, unit: 'HOURS') 
         buildDiscarder(logRotator(numToKeepStr:'10'))
         }
   
    stages {
            stage ('Отмена захвата в КА_ЛАД под Сборка ') {
                    steps {
                          timestamps {
                            script {
                                 //env.PathRAC=env.PathRAC +"\"%ProgramFiles%\\1cv8\\8.3.22.1704\\bin\\rac.exe\""                                 
                                 //echo "${env.PathRAC}"
                                 //utils.cmd("runner session kill --settings tools/json/vrunner_KA_LAD.json --rac ${env.PathRAC} --filter appid=Designer --with-nolock")
                                 ////"C:\Program Files\1cv8\common\1cestart.exe" DESIGNER /S"nn-1cdev-01\ka_lad" /N"Данелия_Наталья" /P"K*/7Vr9v7pdr" /ConfigurationRepositoryF"tcp://nn-sql-01/ka_proverka" /ConfigurationRepositoryN"Сборка" /ConfigurationRepositoryP "" /ConfigurationRepositoryUnLock -force true
                                 //env.Path1C=env.Path1C +"\"%ProgramFiles%\\1cv8\\8.3.22.1704\\bin\\1cv8.exe\""                                 
                                 //echo "${env.Path1C}"                                  
                                 //returnCode=utils.cmd("${env.Path1C} DESIGNER /DisableStartupDialogs ${baseconnection} ${user} ${pass} ${storagepath} ${storageuser} ${storageuserpass} /ConfigurationRepositoryUnLock -force true")                               
                                 // if (returnCode != 0) {
                                  //    utils.raiseError("Ошибка при отмене захвата объектов на сервере в базе ${env.BaseName}")         
                                // utils.cmd("runner bindrepo ${env.StoragePath} ${env.UserName} ${env.Pass} --settings tools/json/vrunner_KA_LAD.json")                                        
                                //метка в хранилище
                                final String url = "http://gitlab.toledo.ru/daneliya.n/testing_ka/-/raw/main/src/cf/VERSION"
                                final String response = utils.cmdOut("curl -s $url")//bat(script:"curl -s $url", returnStdout:true).trim()
                                echo "${response}"
                                firstWord = "<VERSION>"
                                secondWord = "</VERSION>"                   
                                echo response.substring(response.indexOf(firstWord) + firstWord.length(), response.indexOf(secondWord))              
                                //version_number=response.substring(response.indexOf(firstWord) + firstWord.length(), response.indexOf(secondWord))                          
                                //label_text = '"Актуализация версией разработки ' + "${version_number}" + '"'                            
                                                             
                                //returnCode=utils.cmd("${env.Path1C} DESIGNER /DisableStartupDialogs ${baseconnection} ${user} ${pass} ${storagepath} ${storageuser} ${storageuserpass} /ConfigurationRepositorySetLabel -name ${label_text}")             
                            }                           
                           
                        }
                    }
                
                 }
        }
}
def cmd_m(command) {   
    stage("Команда") {
        timestamps {
            script{
                bat "chcp 65001\n ${command}"
            }
        }
    }
}        